type CircleContribution @entity(immutable: true) {
  id: Bytes!
  contributor: Bytes! # address
  contributionAmount: BigInt! # int256
  contributionId: Bytes! # bytes32
  isUSDC: Boolean! # bool
  circleId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CircleCreated @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  circleId: Bytes! # bytes32
  isUSDC: Boolean! # bool
  goalValueToRaise: BigInt! # uint256
  leadDurations: BigInt! # uint256
  dueDuration: BigInt! # uint256
  builderScore: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Circle @entity(immutable: false) {
  id: Bytes!
  creator: Bytes! # address
  circleId: Bytes! # bytes32
  isUSDC: Boolean! # bool
  goalValueToRaise: BigInt! # uint256
  leadDurations: BigInt! # uint256
  dueDuration: BigInt! # uint256
  builderScore: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  contributors: [Bytes!] # address
  contributionAmount: [BigInt!]
  state: Int!
  redeemedBlockNumber: BigInt!
  redeemedBlockTimestamp: BigInt!
  redeemedTransactionHash: Bytes!
  killedBlockNumber: BigInt!
  killedBlockTimestamp: BigInt!
  killedTransactionHash: Bytes!
}

type UserReputationScore @entity(immutable: false) {
  id: Bytes! #address
  user: Bytes! # address
  reputationScore: Int! # uint16
  numberOfContributions: Int! # uint16
  repaymentCount: Int! # uint16
}

type CircleKilled @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  circleId: Bytes! # bytes32
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CircleRedeemed @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  circleId: Bytes! # bytes32
  amountRaised: BigInt! # uint96
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CircleThresholdUpdated @entity(immutable: true) {
  id: Bytes!
  newAllyGoalValueThreshold: BigInt! # uint256
  newGuardianGoalValueThreshold: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RepaymentFailed @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  paymentFailureCount: Int! # uint8
  circleId: Bytes! # bytes32
  timeStamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RepaymentSuccessful @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  circleId: Bytes! # bytes32
  paybackAmount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserBanned @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  timestamp: BigInt! # uint256
  userFailedRepaymentCount: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserCollateralUnlocked @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  circleId: Bytes! # bytes32
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserContributionRedeemed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  contributionId: Bytes! # bytes32
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserReputationScoreSlashed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  updatedReputationScore: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserReputationScoreUpdated @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  numberOfContributions: Int! # uint16
  repaymentCount: Int! # uint16
  reputationScore: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QQuestP2PCircleMembershipRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QQuestP2PCircleMembershipRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QQuestP2PCircleMembershipRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferBatch @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  ids: [BigInt!]! # uint256[]
  values: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferSingle @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  QQuestP2PCircleMembership_id: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type URI @entity(immutable: true) {
  id: Bytes!
  value: String! # string
  QQuestP2PCircleMembership_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserAccoutCreated @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserTierUpgraded @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
